// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

// calc_optimal_points
NumericVector calc_optimal_points(NumericVector moments, int N);
RcppExport SEXP _scmc_calc_optimal_points(SEXP momentsSEXP, SEXP NSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type moments(momentsSEXP);
    Rcpp::traits::input_parameter< int >::type N(NSEXP);
    rcpp_result_gen = Rcpp::wrap(calc_optimal_points(moments, N));
    return rcpp_result_gen;
END_RCPP
}
// sample_optimal_points
NumericVector sample_optimal_points(NumericVector x, int N);
RcppExport SEXP _scmc_sample_optimal_points(SEXP xSEXP, SEXP NSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< int >::type N(NSEXP);
    rcpp_result_gen = Rcpp::wrap(sample_optimal_points(x, N));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_scmc_calc_optimal_points", (DL_FUNC) &_scmc_calc_optimal_points, 2},
    {"_scmc_sample_optimal_points", (DL_FUNC) &_scmc_sample_optimal_points, 2},
    {NULL, NULL, 0}
};

RcppExport void R_init_scmc(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
